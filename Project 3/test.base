logical a.
integer i1.
void x.

tuple swap_t {
    integer a.
    integer b.
}.

tuple swap_t swapper.

integer factorial {integer n} [
  integer p.p=1.
  if n<0|n==0[return 0.]if n==1[return 1.]
  while n>0[p=p*n.n--.]
]

integer fibonacci {integer n} [
  if n == 0[return 0.]else[if n <= 2[return 1.]
  return fibonacci(n - 1) + fibonacci(n - 2).
  ]
]

void test {} [ !! ]
while k == 0 [ $ ]
write << "Interesting!! didn't know it could do \"this\"".
]
]

void swap {} [
  integer z. z = swapper:a.
  swapper:a = swapper:b. swapper:b = z.
]

integer mod {integer x, integer y} [
  integer q. q = x / y.

  if x < 0 | y <= 0 [ write << "Cannot perform modulo". ]

  return q * y - x.
]

integer gcd {integer x, integer y} [
  integer z.
  if (y > x) [z = x. x = y. y = z.]

  swapper:a = x. swapper:b = y.

  swap().

  x = swapper:a. y = swapper:b.

  while y ~= 0 [ z = y. y = mod(x, y). x = z.]

  return x.
]

!! Okay, no more fun and games.
!! Now we start sequential testing

!! Variable Declarations.
integer x. integer y. integer z.
logical x. logical y. logical z.
void    x. void
